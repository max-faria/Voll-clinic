{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nexport default function usePost() {\n  _s();\n  const [erro, setErro] = useState('');\n  const [sucesso, setSucesso] = useState(false);\n  const [resposta, setResposta] = useState('');\n  async function cadastrarDados(_ref) {\n    let {\n      url,\n      dados\n    } = _ref;\n    try {\n      const resposta = await fetch(`http://localhost:8080/${url}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dados)\n      });\n      setSucesso(true);\n      const respostaConvertida = await resposta.json();\n      setResposta(respostaConvertida.token);\n    } catch (erro) {\n      setErro('Não foi possível enviar os dados');\n    }\n  }\n  return {\n    cadastrarDados,\n    sucesso,\n    erro,\n    resposta\n  };\n}\n_s(usePost, \"yIvGSbqO5JtI/jvWWWSaw+GLkU8=\");","map":{"version":3,"names":["useState","usePost","_s","erro","setErro","sucesso","setSucesso","resposta","setResposta","cadastrarDados","_ref","url","dados","fetch","method","headers","body","JSON","stringify","respostaConvertida","json","token"],"sources":["/Users/maxfaria/Documents/GitHub/voll/web/src/usePost.ts"],"sourcesContent":["import { useState } from \"react\";\n\nexport default function usePost() {\n        const [erro, setErro] = useState('')\n        const [sucesso, setSucesso] = useState(false)\n        const [resposta, setResposta] = useState('')\n\n        async function cadastrarDados<T>({url, dados}:{url: string, dados: T}) {\n            try{\n                const resposta = await fetch (`http://localhost:8080/${url}`, {\n                    method: 'POST',\n                    headers:{\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(dados)\n                })\n                setSucesso(true)\n                const respostaConvertida = await resposta.json();\n                setResposta(respostaConvertida.token) \n            }catch (erro) {\n                setErro('Não foi possível enviar os dados')\n            }\n        }\n        return {cadastrarDados, sucesso, erro, resposta}\n}"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE5C,eAAeS,cAAcA,CAAAC,IAAA,EAA0C;IAAA,IAAtC;MAACC,GAAG;MAAEC;IAA6B,CAAC,GAAAF,IAAA;IACjE,IAAG;MACC,MAAMH,QAAQ,GAAG,MAAMM,KAAK,CAAG,yBAAwBF,GAAI,EAAC,EAAE;QAC1DG,MAAM,EAAE,MAAM;QACdC,OAAO,EAAC;UACJ,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,KAAK;MAC9B,CAAC,CAAC;MACFN,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMa,kBAAkB,GAAG,MAAMZ,QAAQ,CAACa,IAAI,EAAE;MAChDZ,WAAW,CAACW,kBAAkB,CAACE,KAAK,CAAC;IACzC,CAAC,QAAOlB,IAAI,EAAE;MACVC,OAAO,CAAC,kCAAkC,CAAC;IAC/C;EACJ;EACA,OAAO;IAACK,cAAc;IAAEJ,OAAO;IAAEF,IAAI;IAAEI;EAAQ,CAAC;AACxD;AAACL,EAAA,CAtBuBD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}