{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nexport default function usePost() {\n  _s();\n  const [erro, setErro] = useState('');\n  const [sucesso, setSucesso] = useState(false);\n  const [resposta, setResposta] = useState('start');\n  async function cadastrarDados(_ref) {\n    let {\n      url,\n      dados,\n      token\n    } = _ref;\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    try {\n      const res = await fetch(`http://localhost:8080/${url}`, {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(dados)\n      });\n      setSucesso(true);\n      const respostaConvertida = await res.json();\n      const teste = respostaConvertida.token;\n      console.log(teste);\n      setResposta(teste);\n      console.log(resposta);\n    } catch (erro) {\n      setErro('Não foi possível enviar os dados');\n    }\n  }\n  return {\n    cadastrarDados,\n    sucesso,\n    erro,\n    resposta\n  };\n}\n_s(usePost, \"4sCWTIinnD5SyU4gm3hUzZg3HyQ=\");","map":{"version":3,"names":["useState","usePost","_s","erro","setErro","sucesso","setSucesso","resposta","setResposta","cadastrarDados","_ref","url","dados","token","headers","res","fetch","method","body","JSON","stringify","respostaConvertida","json","teste","console","log"],"sources":["/Users/maxfaria/Documents/GitHub/voll/web/src/usePost.ts"],"sourcesContent":["import { useState } from \"react\";\n\nexport default function usePost() {\n    const [erro, setErro] = useState('');\n    const [sucesso, setSucesso] = useState(false);\n    const [resposta, setResposta] = useState('start');\n\n    async function cadastrarDados<T>({url, dados, token} : \n        {url: string, dados: T, token?: string}) {\n            \n            const headers: HeadersInit = {\n                'Content-Type': 'application/json'\n            }\n            if (token) {\n                headers['Authorization'] = `Bearer ${token}`;\n            }\n\n            try {\n            const res = await fetch(`http://localhost:8080/${url}`, {\n                method: 'POST',\n                headers,\n                body: JSON.stringify(dados)\n            })\n            setSucesso(true);\n            const respostaConvertida = await res.json();\n            const teste = respostaConvertida.token\n            console.log(teste)\n            setResposta(teste)\n            console.log(resposta)\n        } catch (erro) {\n        setErro('Não foi possível enviar os dados');\n    }\n}\n\nreturn {cadastrarDados, sucesso, erro, resposta}\n}"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,OAAO,CAAC;EAEjD,eAAeS,cAAcA,CAAAC,IAAA,EACgB;IAAA,IADZ;MAACC,GAAG;MAAEC,KAAK;MAAEC;IACJ,CAAC,GAAAH,IAAA;IAEnC,MAAMI,OAAoB,GAAG;MACzB,cAAc,EAAE;IACpB,CAAC;IACD,IAAID,KAAK,EAAE;MACPC,OAAO,CAAC,eAAe,CAAC,GAAI,UAASD,KAAM,EAAC;IAChD;IAEA,IAAI;MACJ,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAE,yBAAwBL,GAAI,EAAC,EAAE;QACpDM,MAAM,EAAE,MAAM;QACdH,OAAO;QACPI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,KAAK;MAC9B,CAAC,CAAC;MACFN,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMe,kBAAkB,GAAG,MAAMN,GAAG,CAACO,IAAI,EAAE;MAC3C,MAAMC,KAAK,GAAGF,kBAAkB,CAACR,KAAK;MACtCW,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MAClBf,WAAW,CAACe,KAAK,CAAC;MAClBC,OAAO,CAACC,GAAG,CAAClB,QAAQ,CAAC;IACzB,CAAC,CAAC,OAAOJ,IAAI,EAAE;MACfC,OAAO,CAAC,kCAAkC,CAAC;IAC/C;EACJ;EAEA,OAAO;IAACK,cAAc;IAAEJ,OAAO;IAAEF,IAAI;IAAEI;EAAQ,CAAC;AAChD;AAACL,EAAA,CAjCuBD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}